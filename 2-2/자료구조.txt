선형 자료구조 - 스택, 큐, 선형리스트, 연결리스트
비선형 자료구조 - 트리, 그래프, 히프

시간 복잡도: 알고리즘을 이루고 있는 연산들이 몇 번이나 수행되는지를 입력 크기(n)에
따른 함수로 표시
산술 연산, 대입 연산, 비교 연산, 이동 연산의 기본적인 연산만 고려함
(for 루프 제어 연산은 고려 x)

알고리즘 1
sum <- 0;
for i <- 1 to n do
 sum <- sum + n;            << 대입연산 n +1, 덧셈연산 n ==> 전체 연산 수 2n+1

알고리즘 2
sum <- 0;
for(i <- 1; i <= n; i <- i*2) do
   sum<- sum + i;                    << 대입연산 logn + 1, 산술연산 log n 
                                                 ==> 전체 연산수 2logn +1 , Big O : O(logn)

알고리즘 3
sum <- 0;
for(i<- 1; i <= n * n; i++) do
  sum <- sum + i;                       << 대입연산 n^2 + 1, 산술연산 n^2
                                                   ==> 전체 연산수 2n^2 + 1, Big O : O(n^2)
알고리즘 4
sum <- 0;
for(i<- 1; i <= n; i<-i+2) do
  sum <- sum + i;                   <<대입연산 n/2 + 1, 산술연산 n / 2
                                           ==> 전체 연산 수 n +1, Big O : O(n)

알고리즘 5
sum <- 0;
 for(i<-1; i<= 10; i++) do
   sum <- sum + i;                << 대입연산 11, 산술연산 10
                                         ==> 전체 연산 수 21, Big O : O(1)

알고리즘 6
 sum <- 0;
for(i<-1; i <=n; i++) do
  if (i %2 == 0)
   sum <- sum +i;            << 대입연산 n/2 + 1, 산술 연산 n + n / 2, 비교 연산 n 
                                         ==> 전체 연산 수 3n + 1, Big O : O(n)

알고리즘 7
 sum <- 0;
 for(i<-1; logi <= n; i++) do
   sum <- sum + i;                  << 대입연산 2^n + 1, 산술 연산 2^n
                                               ==>전체 연산 수 2^(n+1) + 1, Big O : O(2^n)
                                       
알고리즘 8
sum <- 0;
for (j<-0; j < n*n; j++) do
 sum <- sum + 1;
for(i<-0; i <n; i++) do
 sum<- sum + 1;                << 대입 연산 n^2 + n + 1, 산술 연산 n^2 + n
                                           ==> 전체 연산 수 2n^2 + 2n + 1, Big O : O(n^2)

알고리즘 9
sum <- 0;
for(i <- n; i >1; i<- i/2) do
  for(j<-0; j < n * n; j++) do 
      sum <- sum +1;           << 대입 연산 n^2logn + 1, 산술 연산 n^2logn
                                       ==> 전체 연산 수 2n^2logn + 1, Big O : O(n^2logn)

알고리즘 10
 sum <- 0;
  for(i<-0; i<2n; i<-i+2) do
   for(j<-0; j<n;j<-j*2) do
      sum<- sum +1;             << 대입 연산 nlogn + 1, 산술 연산 nlogn
                                          전체 연산 수 2nlogn + 1, Big O : O(nlogn)
